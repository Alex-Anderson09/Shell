// Example Use:
// . Type hello to get the response Hello, world!.
// . Type !! to repeat the last command.
// . Type !1 to repeat the first command in history.
// . Type exit to quit the REPL.

#include <iostream>
#include <map>
#include <string>
#include <functional>  // for std::function
#include <vector>      // for std::vector

int main() {
    // Flush after every std::cout / std::cerr
    std::cout << std::unitbuf;
    std::cerr << std::unitbuf;

    // Uncomment this block to pass the first stage
    std::cout << "$ ";
    //
    std::string input;
    std::getline(std::cin, input);

    std::cout << input << ": command not found\n";

    // Define a map of commands
    std::map<std::string, std::function<void()>> commands;

    // Add commands and their corresponding functions
    commands["hello"] = []() { std::cout << "Hello, world!\n"; };
    commands["exit"] = []() { std::cout << "Exiting REPL...\n"; exit(0); };

    // Command history vector
    std::vector<std::string> commandHistory;

    while (true) {
        std::cout << "repl> ";
        std::string command;
        std::cin >> command;

        // Add command to history
        commandHistory.push_back(command);

        // Allow access to previous commands using '!!' or '!n'
        if (command == "!!") {
            if (commandHistory.size() > 1) { // At least one previous command should exist
                // Retrieve and execute the last command (before "!!")
                std::string lastCommand = commandHistory[commandHistory.size() - 2]; // 2nd to last since last is "!!"
                std::cout << "Repeating last command: " << lastCommand << std::endl;
                command = lastCommand;  // Reuse the last command
            } else {
                std::cout << "No command history" << std::endl;
                continue; // Go to the next iteration of the loop
            }
        } else if (command.size() > 1 && command[0] == '!') {
            try {
                // Parse the number after the '!'
                int index = std::stoi(command.substr(1)) - 1;
                if (index >= 0 && index < commandHistory.size()) {
                    std::string prevCommand = commandHistory[index];
                    std::cout << "Repeating command " << index + 1 << ": " << prevCommand << std::endl;
                    command = prevCommand;  // Reuse the previous command
                } else {
                    std::cout << "Invalid command history index" << std::endl;
                    continue;
                }
            } catch (const std::exception& e) {
                std::cout << "Invalid input for command history" << std::endl;
                continue;
            }
        }

        // Execute the command if it exists in the command map
        if (commands.find(command) != commands.end()) {
            commands[command]();
        } else {
            std::cout << command << ": command not found" << std::endl;
        }

        std::cout << std::endl;
    }

    return 0;
}
